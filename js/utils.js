export function shuffle(array) {
  let currentIndex = array.length,
    randomIndex;

  // While there remain elements to shuffle.
  while (currentIndex != 0) {
    // Pick a remaining element.
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;

    // And swap it with the current element.
    [array[currentIndex], array[randomIndex]] = [
      array[randomIndex],
      array[currentIndex],
    ];
  }

  return array;
}

export function get_random_item(array_or_set) {
  let keys = Array.from(array_or_set.keys());
  return keys[Math.floor(Math.random() * keys.length)];
}

export function get_random_in_range(min, max) {
  return Math.random() * (max - min) + min;
}

export function get_random_int_in_range(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

export function get_random_key(obj) {
  let keys = Object.keys(obj);
  return keys[Math.floor(Math.random() * keys.length)];
}

export function clamp(num, min, max) {
  return Math.min(Math.max(num, min), max);
}

export const mapRange = (value, x1, y1, x2, y2) =>
  ((value - x1) * (y2 - x2)) / (y1 - x1) + x2;

export const hexColors = [
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0911",
  "#fe0509",
  "#ff0000",
  "#ff0600",
  "#ff0b00",
  "#ff1100",
  "#ff1700",
  "#ff1c00",
  "#ff2200",
  "#ff2800",
  "#ff2e00",
  "#ff3300",
  "#ff3900",
  "#ff3f00",
  "#ff4400",
  "#ff4a00",
  "#ff5000",
  "#ff5500",
  "#ff5b00",
  "#ff6100",
  "#ff6600",
  "#ff6c00",
  "#ff7200",
  "#ff7700",
  "#ff7d00",
  "#ff8300",
  "#ff8900",
  "#ff8e00",
  "#ff9400",
  "#ff9a00",
  "#ff9f00",
  "#ffa500",
  "#ffa800",
  "#ffaa00",
  "#ffad00",
  "#ffb000",
  "#ffb200",
  "#ffb500",
  "#ffb800",
  "#ffba00",
  "#ffbd00",
  "#ffc000",
  "#ffc200",
  "#ffc500",
  "#ffc800",
  "#ffca00",
  "#ffcd00",
  "#ffcf00",
  "#ffd200",
  "#ffd500",
  "#ffd700",
  "#ffda00",
  "#ffdd00",
  "#ffdf00",
  "#ffe200",
  "#ffe500",
  "#ffe700",
  "#ffea00",
  "#ffed00",
  "#ffef00",
  "#fff200",
  "#f6ee00",
  "#edea00",
  "#e5e600",
  "#dce200",
  "#d3de00",
  "#cada00",
  "#c1d600",
  "#b9d300",
  "#b0cf00",
  "#a7cb00",
  "#9ec700",
  "#95c300",
  "#8dbf00",
  "#84bb00",
  "#7bb700",
  "#72b300",
  "#6aaf00",
  "#61ab00",
  "#58a700",
  "#4fa300",
  "#469f00",
  "#3e9c00",
  "#359800",
  "#2c9400",
  "#239000",
  "#1a8c00",
  "#128800",
  "#098400",
  "#008000",
  "#007b09",
  "#007712",
  "#00721b",
  "#006e24",
  "#00692e",
  "#006537",
  "#006040",
  "#005b49",
  "#005752",
  "#00525b",
  "#004e64",
  "#00496d",
  "#004576",
  "#004080",
  "#003b89",
  "#003792",
  "#00329b",
  "#002ea4",
  "#0029ad",
  "#0025b6",
  "#0020bf",
  "#001bc8",
  "#0017d1",
  "#0012db",
  "#000ee4",
  "#0009ed",
  "#0005f6",
  "#0000ff",
  "#0300fb",
  "#0500f6",
  "#0800f2",
  "#0b00ed",
  "#0d00e9",
  "#1000e4",
  "#1300e0",
  "#1500db",
  "#1800d7",
  "#1b00d2",
  "#1d00ce",
  "#2000c9",
  "#2300c5",
  "#2600c1",
  "#2800bc",
  "#2b00b8",
  "#2e00b3",
  "#3000af",
  "#3300aa",
  "#3600a6",
].reverse();
